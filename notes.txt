////////////////////////////
`const { rows } = models.Country.findAll({
  where: {
    continent: 'America'
  },
  include: [{
    model: models.Activity,
    //attributes: ['name'],
    where: {
      name: 'buceo'
    }
  }],
})`

///////////////
`
Imagina que tengo estos modelos en una relacion MANY-TO-MANY:

Country <-- Country_Activity --> Activity

Quiero seleccionar todos los paises cuyo continente sea 'America' y que cuenten con la actividad de 'buceo'


SELECT Country.name
FROM Country
JOIN CountryActivity ON CountryActivity.countryId = Country.id
JOIN Activity ON Activity.id = CountryActivity.activityId
WHERE Country.continent = 'America' AND Activity.name = 'soccer'
ORDER BY ASC;

Necesito traducir la query anterior a Sequelize

`

Create a country_activity record:
- Link it to 3 countries
===================================================

SELECT "id", "name", "continent", "code", "capital", "subregion", "area", "population", "flag", "createdAt", "updatedAt" FROM "country" AS "Country" WHERE "Country"."name" = 'Mexico' LIMIT 1;

SELECT "id", "name", "continent", "code", "capital", "subregion", "area", "population", "flag", "createdAt", "updatedAt" FROM "country" AS "Country" WHERE "Country"."name" = 'Argentina' LIMIT 1;

SELECT "id", "name", "continent", "code", "capital", "subregion", "area", "population", "flag", "createdAt", "updatedAt" FROM "country" AS "Country" WHERE "Country"."name" = 'Chile' LIMIT 1;

INSERT INTO "activity" ("id","name","difficulty","duration","season","createdAt","updatedAt") 
VALUES (DEFAULT,$1,$2,$3,$4,$5,$6) 
RETURNING "id","name","difficulty","duration","season","createdAt","updatedAt";

SELECT "id", "CountryId", "ActivityId", "createdAt", "updatedAt" FROM "country_activity" AS "CountryActivity" WHERE "CountryActivity"."ActivityId" = 1 AND "CountryActivity"."CountryId" IN (145, 11, 48);

INSERT INTO "country_activity" ("id","CountryId","ActivityId","createdAt","updatedAt") 
VALUES 
  (DEFAULT,145,1,'2021-05-11 07:39:08.163 +00:00','2021-05-11 07:39:08.163 +00:00'),
  (DEFAULT,11,1,'2021-05-11 07:39:08.163 + 00:00','2021-05-11 07:39:08.163 +00:00'),
  (DEFAULT,48,1,'2021-05-11 07:39:08.163 +00:00','2021-05-11 07:39:08.163 +00:00')
  RETURNING "id","CountryId","ActivityId","createdAt","updatedAt";

/////////////////////////////////////////////////////

DB.deals.findAll({
    where: {
      InvestmentVehicleId: req.query.vehicle_id,
    },
    include: [
      {
        model: DB.DealAssets,
        include: [DB.DealUpdates, DB.DealReturns],
      },

      {
        model: DB.deals,
        as: 'Parent',
        include: {
          model: DB.DealAssets,
          include: {
            model: DB.DealUpdates,
          }
        },
      },
      {
        model: DB.deals,
        as: 'Children',
        include: {
          model: DB.DealAssets,
          include: {
            model: DB.DealUpdates,
          }
        },
        // attributes: ['id'],
      },
      DB.InvestmentVehicles,
      DB.startups],
    // include: [{ all: true, nested: true }],
  })


  DB.startups.findAll({
    attributes: ['id', 'name'],
    include: [{
      model: DB.deals,
      attributes: ['id', 'name'],
      include: [
        {
          model: DB.InvestmentVehicles,
          attributes: ['id', 'name'],
        },
      ],
    }],
  })

  exports.GetSpecificStartupUpdates = (req, res, next) => {
  DB.updates.findAll({
    where: {
      startupId: req.params.id,
    },
    include: [DB.metrics],
    order: [['createdAt', 'DESC']],
  })
    .then((updates) => res.status(200).send({
      status: 200,
      data: updates,
    }));
}; // GET ALL UPDATES





SELECT "Country"."id", "Country"."name", "Activities"."id" AS "Activities.id", "Activities"."name" AS "Activities.name", "Activities"."difficulty" AS "Activities.difficulty", "Activities"."duration" AS "Activities
.duration", "Activities"."season" AS "Activities.season", "Activities"."createdAt" AS "Activities.createdAt", "Activities"."updatedAt" AS "Activities.updatedAt", "Activities->CountryActivity"."id" AS "Activities.CountryActivity.id", "
Activities->CountryActivity"."CountryId" AS "Activities.CountryActivity.CountryId", "Activities->CountryActivity"."ActivityId" AS "Activities.CountryActivity.ActivityId", "Activities->CountryActivity"."createdAt" AS "Activities.Countr
yActivity.createdAt", "Activities->CountryActivity"."updatedAt" AS "Activities.CountryActivity.updatedAt"

FROM "country" AS "Country"

INNER JOIN ( "country_activity" AS "Activities->CountryActivity" INNER JOIN "activity" AS "Activities"ON "Activities"."id" = "Activities->CountryActivity"."ActivityId") ON "Country"."id" = "Activities->CountryActivity"."CountryId" AND "Activities"."name" = 'Soccer' WHERE "Country"."continent" = 'Americas' ORDER BY "Country"."name"
ASC;



//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////

EXAMPLE QUERY STRINGS:
========================
let { name, continent, activity, order, page, limit } = req.query;

......................................................
Name:       V
Continent:  V
Activity:   V

name=a&continent=Americas&activity=Ski
......................................................
Name:       V
Continent:  V
Activity:   X

name=ana&continent=Americas
......................................................
Name:       V
Continent:  X
Activity:   X

name=bra
......................................................
Name:       X
Continent:  X
Activity:   X

......................................................
Name:       V
Continent:  X
Activity:   V

name=ance&activity=Ski
......................................................
Name:       X
Continent:  V
Activity:   V

continent=Americas&activity=Ski
......................................................
Name:       X
Continent:  V
Activity:   X

continent=Americas
......................................................
Name:       X
Continent:  X
Activity:   V

activity=Ski
......................................................